import logging
from sys import argv

from render_engine.cli.cli import get_app, split_module_site
from render_engine.collection import Collection
from render_engine.page import Page
from textual.app import ComposeResult
from textual.widget import Widget
from textual.widgets import (
    Label,
    ListItem,
    ListView,
    Markdown,
)

from editor import Editor, EditorScreen

module, app = split_module_site(argv[1])
site = get_app(module, app)


class FileLabel(Label):
    def __init__(self, file: Page):
        super().__init__(file.title)
        self.content = file.content


def files_in_collection(collection: Collection) -> list[ListItem]:
    """Get a list of the files in a collection"""
    return [
        ListItem(
            FileLabel(file),
            name=file.__class__.__name__,
        )
        for file in collection.sorted_pages
    ]


class CollectionLabel(Label):
    def __init__(self, collection: Collection):
        super().__init__(collection.__class__.__name__)
        self.collection = collection


def get_collections(site):
    """Get a list of the collections from the site route_list"""
    return [
        collection
        for _, collection in site.route_list.items()
        if isinstance(collection, Collection)
    ]


def get_collection_labels(collections: list[Collection]) -> list[ListItem]:
    """Get a list of the collections from the site route_list"""
    return [
        ListItem(
            CollectionLabel(
                collection,
            ),
            name=collection.__class__.__name__,
            id=collection.__class__.__name__,
        )
        for collection in collections
    ]


class CollectionList(ListView):
    """A list of collections"""

    COMPONENT_CLASSES = {"listview-sidebar"}


class CollectionFiles(ListView):
    """A widget for displaying the files in a collection"""

    COMPONENT_CLASSES = {"listview-sidebar"}
    BINDINGS = [("e", "edit_file")]

    async def action_edit_file(self) -> None:
        if self.highlighted_child is not None:
            content = self.highlighted_child.children[0].content
            await self.app.push_screen("editor")
            self.app.query_one("#file_editor").load_text(content)


class CollectionSideBar(Widget):
    """A sidebar for the collections"""

    def compose(self) -> ComposeResult:
        collections = get_collections(site)
        yield CollectionList(*get_collection_labels(collections), id="collection_list")
        yield CollectionFiles(*files_in_collection(collections[0]), id="file_selection")


class MarkdownPreview(Markdown):
    """Custom Markdown widget"""

    COMPONENT_CLASSES = {"editor": EditorScreen}
